-----------------------------------------------------------------------
 ------ Informatics 2D - 2015/16 - Second Assignment - Planning ------
-----------------------------------------------------------------------

 Write here you matriculation number (only - your name is not needed)
 Matriculation Number: s1448512

1.1) I consider the drop off, parking lot and pick up areas are constants. This is not as easily scalable as having predicates, but given that these are rather static definitions in real life, making them constants facilitates the computations in the implementation side, by reducing the search tree.
These predicates describe the connections between the areas: Connected(DropOff, ParkingLot), Connected(ParkingLot, DropOff), Connected(PickUp, ParkingLot), Connected(ParkingLot, PickUp).
I choose to model the connections in a bidirectional way when defining the starting state, rather then checking bidirectionality in the implementation part.

1.2) To keep track of the location of the agent or of a car, I can have a predicate “In” taking two arguments: the subject, the location and the situation (since it's a fluent). For example, I can have In(Car, DropOff, S) indicating a state where the Car is located in the drop-off point D in situation S. Or In(Agent, ParkingLot, S) indicating that the Agent is in the parking lot in situation S.

1.3) I can have the following predicates to describe the following states for a parked and delivered car respectively: Parked(car, S), Delivered(car, S), where Car(car).

1.4) Connected(DropOff, ParkingLot) and Connected(ParkingLot, DropOff) and Connected(ParkingLot, PickUp) and Connected(PickUp, ParkingLot) and Car(car) and In(car, DropOff, S0) and In(Agent, DropOff, S0). Everything else is false.

1.5)
In(Agent, from, s) and Connected(to, from) => Poss(Move(Agent, from, to))
Poss(Move(Agent, from, to)) => In(Agent, to, Result(Move(Agent, from, to), s)) and not(In(Agent, from, result(Move(Agent, from, to), s)))

1.6)
Car(car) and In(Agent, ParkingLot, s) and In(car, ParkingLot, s) and not(Parked(car)) => Poss(Park(Agent, car))
Poss(Park(Agent, car)) => Parked(car, Result(Park(Agent, car), s))

1.7)
In(Agent, from, s) and In(car, from, s) and Connected(to, from) and Car(car) => Poss(Drive(Agent, car, from, to))
Poss(Drive(Agent, car, from, to)) => In(Agent, to, Result(Drive(Agent, car, from, to), s)) and In(car, to, Result(Drive(Agent, car, from, to), s)) and not(Parked(car, Result(Drive(Agent, car, from, to), s)))

1.8)
In(Agent, PickUp, s) and In(car, PickUp, s) => Poss(Deliver(Agent, car))
Poss(Deliver(Agent, car)) => Delivered(car, Result(Deliver(Agent, car), s))

1.9)
The successor-state axioms solve the so-called frame problem. The frame problem refers to how effect axioms fail to state what remains unchanged as the result of an action.
There are formalisms that are based on the assumption that all that is not explicitly changed by an action remains unchanged, which effectively fixes the frame problem.

1.10)
Poss(a, s) => (Parked(car, Result(a, s)) <=> a = Park(Agent, car) or (Parked(car, s) and a != Drive(Agent, Car, from, to))

Poss(a, s) => (Delivered(car, Result(a, s)) <=> a = Deliver(Agent, car) or Delivered(car, s))

Poss(a, s) => (In(x, p, Result(a,s)) <=>
(X = Agent and
  (a = Move(X, from, p) or
   a = Drive(X, car, from, p) or
   (in(X, p, s) and not(a = Move(X, from, to)) and not(a = Drive(X, car, from, to)))
  )
)
or
(car(X) and
  (a = Drive(Agent, X, from, p) or
   (in(car, p, s) and not(a = Drive(Agent, X, p, to)))
  )
)

1.11)
The negation of the goal is that for all situations s, not(Parked(Car, s)) holds. If I prove this with resolution, I reach a contradiction, which would make my goal true.

PARK:
not(In(Agent, ParkingLot)) or not(In(Car, ParkingLot)) or Parked(Car)

DRIVE:
not(Car) and not(In(Agent, from)) or not(In(Car, from)) or not(Connected(to, from)) or In(Agent, to)
and
not(In(Agent, from)) or not(In(Car, from)) or not(Connected(to, from)) or In(Car, from)
and
not(In(Agent, from)) or not(In(Car, from)) or not(Connected(to, from)) or not(Parked(Car))

MOVE:
not(In(Agent, from)) or not(Connected(to, from)) or In(Agent, to)
and
not(In(Agent, from)) or not(Connected(to, from)) and (not In(Agent, from))

DELIVER:
not(In(Agent, PickUp)) or not(In(Car, PickUp)) or Delivered(Car))

PARKED:
(a != Park(Agent, Car, ParkingLot) or not(In(Agent, ParkingLot)) or not(In(Car, ParkingLot)) or Parked(Car) or Parked(Car, Result(a, s))
and
(not(Parked(Car, s)) or a = Drive(Agent, Car, from, to) or In(Car, ParkingLot) or Connected(to, from) or Parked(Car, Result(a, s))

DELIVERED:
(a != Deliver(Agent, Car, PickUp) or not(In(Agent, PickUp)) or not(In(Car, PickUp)) or Delivered(Car, Result(a,s))
and
(not(Delivered(Car, s))) or Delivered(Car, Result(a,s))

IN:
(not(In(Agent, P)) or not(In(Car, P)) or a = Move(Agent, P, to) or a = Drive(Agent, Car, P, to) or not(Connected(to, P)) or In(X, P, Result(a,s))
and
(not(In(Agent, from)) or not(In(Car, from)) or a != not(Drive(Agent, Car, from, P)) or not(Connected(P, from)) or In(X, P, Result(a,s))
and
(not(In(Agent, from)) or a != not(Move(Agent, from, P)) or not(Connected(P, from)) or In(X, P, Result(a,s))

INITIAL STATE:
Connected(DropOff, ParkingLot) and Connected(ParkingLot, DropOff) and Connected(ParkingLot, PickUp) and Connected(PickUp, ParkingLot) and and In(Car, DropOff) and In(Agent, DropOff).

I APPLY RESOLUTION (like in lecture slides, on the right is what I obtain from the previous operation, on the right is the rule I'm using)
The only rules that I use come from the initial state of the system, and the park and drive axioms (which makes sense, since to have a parked car, it suffices to apply the park and drive actions)

not(In(Agent, ParkingLot)) or not(In(Car, ParkingLot)) or Parked(Car)                        ~ not(Parked(Car))
not(In(Agent, from)) or not(In(Car, from)) or not(Connected(to, from)) or In(Car, from)      ~ not(In(Agent, ParkingLot)) or not(In(Car, ParkingLot))
Connected(DropOff, ParkingLot) 								                                               ~ not(In(Agent, ParkingLot)) or not(Connected(to, ParkingLot))
not(In(Agent, from)) or not(In(Car, from)) or not(Connected(to, from)) or In(Agent, to)	     ~ not(In(Agent, ParkingLot))
Connected(ParkingLot, DropOff) 								                                               ~ not(In(Agent, from)) or not(In(Car, from)) or not(Connected(ParkingLot, from))
not(In(Agent, DropOff)) or not(In(Car, DropOff))						                                 ~ In(Agent, DropOff)
not(In(Car, DropOff))										                                                     ~ In(Car, DropOff)
~

I obtain the empty set. So I reach a contraction. This proves that there must be a state where the car is parked.

--------------------
Answers to parts 2 and 3 should be included in the appropriate domain-*.pl and instance-*.pl files.
